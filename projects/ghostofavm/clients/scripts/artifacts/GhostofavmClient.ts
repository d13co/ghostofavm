/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Ghostofavm","structs":{"AcctBalanceData":[{"name":"address","type":"address"},{"name":"balance","type":"uint64"},{"name":"minBalance","type":"uint64"}],"BlkData":[{"name":"round","type":"uint64"},{"name":"timestamp","type":"uint64"},{"name":"txnCounter","type":"uint64"},{"name":"proposer","type":"address"}]},"methods":[{"name":"blkTimestamp","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"uint64"},"actions":{"create":["NoOp"],"call":[]},"readonly":true,"events":[],"recommendations":{}},{"name":"blkTxnCounter","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"uint64"},"actions":{"create":["NoOp"],"call":[]},"readonly":true,"events":[],"recommendations":{}},{"name":"blkProposer","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"address"},"actions":{"create":["NoOp"],"call":[]},"readonly":true,"events":[],"recommendations":{}},{"name":"getBlkData","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"(uint64,uint64,uint64,address)","struct":"BlkData"},"actions":{"create":["NoOp"],"call":[]},"readonly":true,"events":[],"recommendations":{}},{"name":"acctBalanceData","args":[{"type":"address[]","name":"accounts"}],"returns":{"type":"(address,uint64,uint64)","struct":"AcctBalanceData"},"actions":{"create":["NoOp"],"call":[]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[24],"errorMessage":"OnCompletion must be NoOp"},{"pc":[351,356],"errorMessage":"account funded"},{"pc":[347],"errorMessage":"index access is out of bounds"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyADAQAgJgEMFR98dQAAAAAAAAAAMRkURDEYFESCBQSZtzkPBLA2lN0EUu6BYQSJhii0BLU0o1I2GgCOBQABACIAQwCIAPkANhoBFzYaAhdMSUsCDkEADUcC0QEWsCIIRQFC/+wosCJDNhoBFzYaAhdMSUsCDkEADUcC0QgWsCIIRQFC/+wosCJDNhoBFzYaAhdMSUsCDkEADEcC0QKwIghFAUL/7YAkFR98dQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDNhoBFzYaAhdMSUsCDkEAIEcC0QFLAdECSwLRCEsDFk8DFlBMFlBMULAiCEUBQv/ZgDwVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwIkM2GgFJI1kjSUsCDEEAKEsCVwIASwFJTgIkCyRYSXMAREsBcwFETBZPAkxQTBZQsCIIRQFC/9GANBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwIkM=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AcctBalanceData = {
  address: string,
  balance: bigint,
  minBalance: bigint
}


/**
 * Converts the ABI tuple representation of a AcctBalanceData to the struct representation
 */
export function AcctBalanceDataFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcctBalanceData, APP_SPEC.structs) as AcctBalanceData
}

export type BlkData = {
  round: bigint,
  timestamp: bigint,
  txnCounter: bigint,
  proposer: string
}


/**
 * Converts the ABI tuple representation of a BlkData to the struct representation
 */
export function BlkDataFromTuple(abiTuple: [bigint, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.BlkData, APP_SPEC.structs) as BlkData
}

/**
 * The argument types for the Ghostofavm contract
 */
export type GhostofavmArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'blkTimestamp(uint64,uint64)uint64': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'blkTxnCounter(uint64,uint64)uint64': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'blkProposer(uint64,uint64)address': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'acctBalanceData(address[])(address,uint64,uint64)': {
      accounts: string[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'blkTimestamp(uint64,uint64)uint64': [firstRound: bigint | number, lastRound: bigint | number]
    'blkTxnCounter(uint64,uint64)uint64': [firstRound: bigint | number, lastRound: bigint | number]
    'blkProposer(uint64,uint64)address': [firstRound: bigint | number, lastRound: bigint | number]
    'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)': [firstRound: bigint | number, lastRound: bigint | number]
    'acctBalanceData(address[])(address,uint64,uint64)': [accounts: string[]]
  }
}

/**
 * The return type for each method
 */
export type GhostofavmReturns = {
  'blkTimestamp(uint64,uint64)uint64': bigint
  'blkTxnCounter(uint64,uint64)uint64': bigint
  'blkProposer(uint64,uint64)address': string
  'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)': BlkData
  'acctBalanceData(address[])(address,uint64,uint64)': AcctBalanceData
}

/**
 * Defines the types of available calls and state of the Ghostofavm smart contract.
 */
export type GhostofavmTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'blkTimestamp(uint64,uint64)uint64' | 'blkTimestamp', {
      argsObj: GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64']
      argsTuple: GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']
      returns: GhostofavmReturns['blkTimestamp(uint64,uint64)uint64']
    }>
    & Record<'blkTxnCounter(uint64,uint64)uint64' | 'blkTxnCounter', {
      argsObj: GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64']
      argsTuple: GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']
      returns: GhostofavmReturns['blkTxnCounter(uint64,uint64)uint64']
    }>
    & Record<'blkProposer(uint64,uint64)address' | 'blkProposer', {
      argsObj: GhostofavmArgs['obj']['blkProposer(uint64,uint64)address']
      argsTuple: GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']
      returns: GhostofavmReturns['blkProposer(uint64,uint64)address']
    }>
    & Record<'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)' | 'getBlkData', {
      argsObj: GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']
      argsTuple: GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']
      returns: GhostofavmReturns['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']
    }>
    & Record<'acctBalanceData(address[])(address,uint64,uint64)' | 'acctBalanceData', {
      argsObj: GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)']
      argsTuple: GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']
      returns: GhostofavmReturns['acctBalanceData(address[])(address,uint64,uint64)']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type GhostofavmSignatures = keyof GhostofavmTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GhostofavmNonVoidMethodSignatures = keyof GhostofavmTypes['methods'] extends infer T ? T extends keyof GhostofavmTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Ghostofavm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GhostofavmSignatures> = GhostofavmTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Ghostofavm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GhostofavmSignatures> = GhostofavmTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type GhostofavmCreateCallParams =
  | Expand<CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & {method: 'blkTimestamp'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & {method: 'blkTimestamp(uint64,uint64)uint64'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & {method: 'blkTxnCounter'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & {method: 'blkTxnCounter(uint64,uint64)uint64'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & {method: 'blkProposer'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & {method: 'blkProposer(uint64,uint64)address'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & {method: 'getBlkData'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & {method: 'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & {method: 'acctBalanceData'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & {method: 'acctBalanceData(address[])(address,uint64,uint64)'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GhostofavmDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GhostofavmCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Ghostofavm smart contract
 */
export abstract class GhostofavmParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends GhostofavmCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'blkTimestamp':
          case 'blkTimestamp(uint64,uint64)uint64':
            return GhostofavmParamsFactory.create.blkTimestamp(params)
          case 'blkTxnCounter':
          case 'blkTxnCounter(uint64,uint64)uint64':
            return GhostofavmParamsFactory.create.blkTxnCounter(params)
          case 'blkProposer':
          case 'blkProposer(uint64,uint64)address':
            return GhostofavmParamsFactory.create.blkProposer(params)
          case 'getBlkData':
          case 'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)':
            return GhostofavmParamsFactory.create.getBlkData(params)
          case 'acctBalanceData':
          case 'acctBalanceData(address[])(address,uint64,uint64)':
            return GhostofavmParamsFactory.create.acctBalanceData(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkTimestamp(params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkTimestamp(uint64,uint64)uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkTxnCounter(params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkTxnCounter(uint64,uint64)uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkProposer(uint64,uint64)address ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkProposer(params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkProposer(uint64,uint64)address' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the getBlkData(uint64,uint64)(uint64,uint64,uint64,address) ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      getBlkData(params: CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'getBlkData(uint64,uint64)(uint64,uint64,uint64,address)' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the acctBalanceData(address[])(address,uint64,uint64) ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      acctBalanceData(params: CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'acctBalanceData(address[])(address,uint64,uint64)' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.accounts],
        }
      },
    }
  }

}

/**
 * A factory to create and deploy one or more instance of the Ghostofavm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GhostofavmFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GhostofavmFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GhostofavmClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GhostofavmClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Ghostofavm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GhostofavmDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? GhostofavmParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (GhostofavmCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new GhostofavmClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkTimestamp: (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkTimestamp(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkTxnCounter: (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkProposer(uint64,uint64)address ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkProposer: (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkProposer(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the getBlkData(uint64,uint64)(uint64,uint64,uint64,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      getBlkData: (params: CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.getBlkData(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the acctBalanceData(address[])(address,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      acctBalanceData: (params: CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.acctBalanceData(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkTimestamp: (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkTimestamp(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkTxnCounter: (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkProposer(uint64,uint64)address ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkProposer: (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkProposer(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the getBlkData(uint64,uint64)(uint64,uint64,uint64,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      getBlkData: (params: CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.getBlkData(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the acctBalanceData(address[])(address,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      acctBalanceData: (params: CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.acctBalanceData(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkTimestamp(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkTimestamp: async (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkTimestamp(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkTimestamp(uint64,uint64)uint64']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkTxnCounter(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkTxnCounter: async (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)uint64'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)uint64']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkTxnCounter(uint64,uint64)uint64']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkProposer(uint64,uint64)address ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkProposer: async (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)address'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)address']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkProposer(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkProposer(uint64,uint64)address']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the getBlkData(uint64,uint64)(uint64,uint64,uint64,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      getBlkData: async (params: CallParams<GhostofavmArgs['obj']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)'] | GhostofavmArgs['tuple']['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.getBlkData(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['getBlkData(uint64,uint64)(uint64,uint64,uint64,address)']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the acctBalanceData(address[])(address,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      acctBalanceData: async (params: CallParams<GhostofavmArgs['obj']['acctBalanceData(address[])(address,uint64,uint64)'] | GhostofavmArgs['tuple']['acctBalanceData(address[])(address,uint64,uint64)']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.acctBalanceData(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['acctBalanceData(address[])(address,uint64,uint64)']) }, appClient: new GhostofavmClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Ghostofavm smart contract
 */
export class GhostofavmClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GhostofavmClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Ghostofavm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GhostofavmClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GhostofavmNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GhostofavmClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GhostofavmClient> {
    return new GhostofavmClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GhostofavmClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GhostofavmClient> {
    return new GhostofavmClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GhostofavmClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Ghostofavm app
   */
  state = {
  }

  public newGroup(): GhostofavmComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a clear state call to the Ghostofavm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GhostofavmComposer
  }
}
export type GhostofavmComposer<TReturns extends [...any[]] = []> = {
  /**
   * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GhostofavmComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GhostofavmComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GhostofavmComposerResults<TReturns>>
}
export type GhostofavmComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

