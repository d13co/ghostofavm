/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Ghostofavm","structs":{},"methods":[{"name":"blkTimestamp","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"blkTxnCounter","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"blkProposer","args":[{"type":"uint64","name":"firstRound"},{"type":"uint64","name":"lastRound"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[43,64,85],"errorMessage":"OnCompletion is not NoOp"},{"pc":[47,68,89],"errorMessage":"can only call when creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czo0LTUKICAgIC8vIEBjb250cmFjdCh7IGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgR2hvc3RvZmF2bSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAOQogICAgcHVzaGJ5dGVzcyAweGIwOTkxOWY3IDB4ZTIyYjBmMGQgMHhkMGJkYmYwNiAvLyBtZXRob2QgImJsa1RpbWVzdGFtcCh1aW50NjQsdWludDY0KXZvaWQiLCBtZXRob2QgImJsa1R4bkNvdW50ZXIodWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJibGtQcm9wb3Nlcih1aW50NjQsdWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2Jsa1RpbWVzdGFtcF9yb3V0ZUAzIG1haW5fYmxrVHhuQ291bnRlcl9yb3V0ZUA0IG1haW5fYmxrUHJvcG9zZXJfcm91dGVANQoKbWFpbl9hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjQtNQogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBHaG9zdG9mYXZtIGV4dGVuZHMgQ29udHJhY3QgewogICAgcHVzaGludCAwIC8vIDAKICAgIHJldHVybgoKbWFpbl9ibGtQcm9wb3Nlcl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czoyMAogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjQtNQogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBHaG9zdG9mYXZtIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czoyMAogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIGNhbGxzdWIgYmxrUHJvcG9zZXIKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmxrVHhuQ291bnRlcl9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czoxMwogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjQtNQogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBHaG9zdG9mYXZtIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czoxMwogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIGNhbGxzdWIgYmxrVHhuQ291bnRlcgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9ibGtUaW1lc3RhbXBfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6NgogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjQtNQogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBHaG9zdG9mYXZtIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czo2CiAgICAvLyBAYWJpbWV0aG9kKHsgb25DcmVhdGU6ICdyZXF1aXJlJyB9KQogICAgY2FsbHN1YiBibGtUaW1lc3RhbXAKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjpHaG9zdG9mYXZtLmJsa1RpbWVzdGFtcChmaXJzdFJvdW5kOiB1aW50NjQsIGxhc3RSb3VuZDogdWludDY0KSAtPiB2b2lkOgpibGtUaW1lc3RhbXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjYtNwogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAncmVxdWlyZScgfSkKICAgIC8vIHB1YmxpYyBibGtUaW1lc3RhbXAoZmlyc3RSb3VuZDogdWludDY0LCBsYXN0Um91bmQ6IHVpbnQ2NCkgewogICAgcHJvdG8gMiAwCiAgICBmcmFtZV9kaWcgLTIKCmJsa1RpbWVzdGFtcF93aGlsZV90b3BAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZm9yIChsZXQgcm91bmQ6IHVpbnQ2NCA9IGZpcnN0Um91bmQ7IHJvdW5kIDw9IGxhc3RSb3VuZDsgcm91bmQrKykgewogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAtMQogICAgPD0KICAgIGJ6IGJsa1RpbWVzdGFtcF9hZnRlcl93aGlsZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjkKICAgIC8vIGxvZyhvcC5CbG9jay5ibGtUaW1lc3RhbXAocm91bmQpKQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgYmxvY2sgQmxrVGltZXN0YW1wCiAgICBpdG9iCiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZm9yIChsZXQgcm91bmQ6IHVpbnQ2NCA9IGZpcnN0Um91bmQ7IHJvdW5kIDw9IGxhc3RSb3VuZDsgcm91bmQrKykgewogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMAogICAgYiBibGtUaW1lc3RhbXBfd2hpbGVfdG9wQDEKCmJsa1RpbWVzdGFtcF9hZnRlcl93aGlsZUAzOgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czo6R2hvc3RvZmF2bS5ibGtUeG5Db3VudGVyKGZpcnN0Um91bmQ6IHVpbnQ2NCwgbGFzdFJvdW5kOiB1aW50NjQpIC0+IHZvaWQ6CmJsa1R4bkNvdW50ZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjEzLTE0CiAgICAvLyBAYWJpbWV0aG9kKHsgb25DcmVhdGU6ICdyZXF1aXJlJyB9KQogICAgLy8gcHVibGljIGJsa1R4bkNvdW50ZXIoZmlyc3RSb3VuZDogdWludDY0LCBsYXN0Um91bmQ6IHVpbnQ2NCkgewogICAgcHJvdG8gMiAwCiAgICBmcmFtZV9kaWcgLTIKCmJsa1R4bkNvdW50ZXJfd2hpbGVfdG9wQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjE1CiAgICAvLyBmb3IgKGxldCByb3VuZDogdWludDY0ID0gZmlyc3RSb3VuZDsgcm91bmQgPD0gbGFzdFJvdW5kOyByb3VuZCsrKSB7CiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIC0xCiAgICA8PQogICAgYnogYmxrVHhuQ291bnRlcl9hZnRlcl93aGlsZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBsb2cob3AuQmxvY2suYmxrVHhuQ291bnRlcihyb3VuZCkpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBibG9jayBCbGtUeG5Db3VudGVyCiAgICBpdG9iCiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6MTUKICAgIC8vIGZvciAobGV0IHJvdW5kOiB1aW50NjQgPSBmaXJzdFJvdW5kOyByb3VuZCA8PSBsYXN0Um91bmQ7IHJvdW5kKyspIHsKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgYmxrVHhuQ291bnRlcl93aGlsZV90b3BAMQoKYmxrVHhuQ291bnRlcl9hZnRlcl93aGlsZUAzOgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czo6R2hvc3RvZmF2bS5ibGtQcm9wb3NlcihmaXJzdFJvdW5kOiB1aW50NjQsIGxhc3RSb3VuZDogdWludDY0KSAtPiB2b2lkOgpibGtQcm9wb3NlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6MjAtMjEKICAgIC8vIEBhYmltZXRob2QoeyBvbkNyZWF0ZTogJ3JlcXVpcmUnIH0pCiAgICAvLyBwdWJsaWMgYmxrUHJvcG9zZXIoZmlyc3RSb3VuZDogdWludDY0LCBsYXN0Um91bmQ6IHVpbnQ2NCkgewogICAgcHJvdG8gMiAwCiAgICBmcmFtZV9kaWcgLTIKCmJsa1Byb3Bvc2VyX3doaWxlX3RvcEAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dob3N0b2Zhdm0vY29udHJhY3QuYWxnby50czoyMgogICAgLy8gZm9yIChsZXQgcm91bmQ6IHVpbnQ2NCA9IGZpcnN0Um91bmQ7IHJvdW5kIDw9IGxhc3RSb3VuZDsgcm91bmQrKykgewogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAtMQogICAgPD0KICAgIGJ6IGJsa1Byb3Bvc2VyX2FmdGVyX3doaWxlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9naG9zdG9mYXZtL2NvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIGxvZyhvcC5CbG9jay5ibGtQcm9wb3Nlcihyb3VuZCkpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBibG9jayBCbGtQcm9wb3NlcgogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2hvc3RvZmF2bS9jb250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBmb3IgKGxldCByb3VuZDogdWludDY0ID0gZmlyc3RSb3VuZDsgcm91bmQgPD0gbGFzdFJvdW5kOyByb3VuZCsrKSB7CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIGJsa1Byb3Bvc2VyX3doaWxlX3RvcEAxCgpibGtQcm9wb3Nlcl9hZnRlcl93aGlsZUAzOgogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyABATEbQQAcggMEsJkZ9wTiKw8NBNC9vwY2GgCOAwAtABgAA4EAQzEZFEQxGBRENhoBFzYaAheIAGQiQzEZFEQxGBRENhoBFzYaAheIADMiQzEZFEQxGBRENhoBFzYaAheIAAIiQ4oCAIv+iwCL/w5BAA6LAEnRARawIgiMAEL/6omKAgCL/osAi/8OQQAOiwBJ0QgWsCIIjABC/+qJigIAi/6LAIv/DkEADYsASdECsCIIjABC/+uJ","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Ghostofavm contract
 */
export type GhostofavmArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'blkTimestamp(uint64,uint64)void': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'blkTxnCounter(uint64,uint64)void': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
    'blkProposer(uint64,uint64)void': {
      firstRound: bigint | number
      lastRound: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'blkTimestamp(uint64,uint64)void': [firstRound: bigint | number, lastRound: bigint | number]
    'blkTxnCounter(uint64,uint64)void': [firstRound: bigint | number, lastRound: bigint | number]
    'blkProposer(uint64,uint64)void': [firstRound: bigint | number, lastRound: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type GhostofavmReturns = {
  'blkTimestamp(uint64,uint64)void': void
  'blkTxnCounter(uint64,uint64)void': void
  'blkProposer(uint64,uint64)void': void
}

/**
 * Defines the types of available calls and state of the Ghostofavm smart contract.
 */
export type GhostofavmTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'blkTimestamp(uint64,uint64)void' | 'blkTimestamp', {
      argsObj: GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void']
      argsTuple: GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']
      returns: GhostofavmReturns['blkTimestamp(uint64,uint64)void']
    }>
    & Record<'blkTxnCounter(uint64,uint64)void' | 'blkTxnCounter', {
      argsObj: GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void']
      argsTuple: GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']
      returns: GhostofavmReturns['blkTxnCounter(uint64,uint64)void']
    }>
    & Record<'blkProposer(uint64,uint64)void' | 'blkProposer', {
      argsObj: GhostofavmArgs['obj']['blkProposer(uint64,uint64)void']
      argsTuple: GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']
      returns: GhostofavmReturns['blkProposer(uint64,uint64)void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type GhostofavmSignatures = keyof GhostofavmTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GhostofavmNonVoidMethodSignatures = keyof GhostofavmTypes['methods'] extends infer T ? T extends keyof GhostofavmTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Ghostofavm smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GhostofavmSignatures> = GhostofavmTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Ghostofavm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GhostofavmSignatures> = GhostofavmTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type GhostofavmCreateCallParams =
  | Expand<CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & {method: 'blkTimestamp'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & {method: 'blkTimestamp(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & {method: 'blkTxnCounter'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & {method: 'blkTxnCounter(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & {method: 'blkProposer'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & {method: 'blkProposer(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GhostofavmDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GhostofavmCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Ghostofavm smart contract
 */
export abstract class GhostofavmParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends GhostofavmCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'blkTimestamp':
          case 'blkTimestamp(uint64,uint64)void':
            return GhostofavmParamsFactory.create.blkTimestamp(params)
          case 'blkTxnCounter':
          case 'blkTxnCounter(uint64,uint64)void':
            return GhostofavmParamsFactory.create.blkTxnCounter(params)
          case 'blkProposer':
          case 'blkProposer(uint64,uint64)void':
            return GhostofavmParamsFactory.create.blkProposer(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkTimestamp(params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkTimestamp(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkTxnCounter(params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkTxnCounter(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
      /**
       * Constructs create ABI call params for the Ghostofavm smart contract using the blkProposer(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      blkProposer(params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'blkProposer(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.firstRound, params.args.lastRound],
        }
      },
    }
  }

}

/**
 * A factory to create and deploy one or more instance of the Ghostofavm smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GhostofavmFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GhostofavmFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GhostofavmClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GhostofavmClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Ghostofavm smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GhostofavmDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? GhostofavmParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (GhostofavmCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new GhostofavmClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkTimestamp: (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkTimestamp(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkTxnCounter: (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkProposer(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      blkProposer: (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GhostofavmParamsFactory.create.blkProposer(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTimestamp(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkTimestamp: (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkTimestamp(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkTxnCounter(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkTxnCounter: (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using the blkProposer(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      blkProposer: (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GhostofavmParamsFactory.create.blkProposer(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkTimestamp(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkTimestamp: async (params: CallParams<GhostofavmArgs['obj']['blkTimestamp(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTimestamp(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkTimestamp(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkTimestamp(uint64,uint64)void']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkTxnCounter(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkTxnCounter: async (params: CallParams<GhostofavmArgs['obj']['blkTxnCounter(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkTxnCounter(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkTxnCounter(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkTxnCounter(uint64,uint64)void']) }, appClient: new GhostofavmClient(result.appClient) }
      },
      /**
       * Creates a new instance of the Ghostofavm smart contract using an ABI method call using the blkProposer(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      blkProposer: async (params: CallParams<GhostofavmArgs['obj']['blkProposer(uint64,uint64)void'] | GhostofavmArgs['tuple']['blkProposer(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GhostofavmParamsFactory.create.blkProposer(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GhostofavmReturns['blkProposer(uint64,uint64)void']) }, appClient: new GhostofavmClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Ghostofavm smart contract
 */
export class GhostofavmClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GhostofavmClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Ghostofavm app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GhostofavmClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GhostofavmNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GhostofavmClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GhostofavmClient> {
    return new GhostofavmClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GhostofavmClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GhostofavmClient> {
    return new GhostofavmClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GhostofavmClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Ghostofavm app
   */
  state = {
  }

  public newGroup(): GhostofavmComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a clear state call to the Ghostofavm contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GhostofavmComposer
  }
}
export type GhostofavmComposer<TReturns extends [...any[]] = []> = {
  /**
   * Makes a clear_state call to an existing instance of the Ghostofavm smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GhostofavmComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GhostofavmComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GhostofavmComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GhostofavmComposerResults<TReturns>>
}
export type GhostofavmComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

