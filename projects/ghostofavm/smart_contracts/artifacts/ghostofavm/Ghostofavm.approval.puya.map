{
  "version": 3,
  "sources": [
    "/home/bit/code/ghostofavm/projects/ghostofavm/smart_contracts/ghostofavm/contract.algo.ts"
  ],
  "mappings": ";AAUA;;;;;;AAAA;;;AAAA;;;;AAAA;AA0BG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAEsC;AAAA;;AAAA;AAArC;;;AAGe;;AAAA;;AACD;;AAAA;;AACE;;AAAA;;AAJW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzB;AAPuD;;AAAA;AAAA;;;;;AAF1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "pushbytes 0x898628b4 // method \"getBlkData(uint64,uint64)(uint64,uint64,uint64,address)\"",
      "defined_out": [
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))"
      ],
      "stack_out": [
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))"
      ]
    },
    "7": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))",
        "tmp%0#1"
      ],
      "stack_out": [
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))",
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "match main_getBlkData_route@2",
      "stack_out": []
    },
    "14": {
      "op": "err"
    },
    "15": {
      "block": "main_getBlkData_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "21": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "22": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "23": {
      "op": "b getBlkData"
    },
    "26": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.getBlkData[routing]",
      "params": {},
      "block": "getBlkData",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "29": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0"
      ],
      "stack_out": [
        "firstRound#0"
      ]
    },
    "30": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "33": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0",
        "lastRound#0"
      ],
      "stack_out": [
        "firstRound#0",
        "lastRound#0"
      ]
    },
    "34": {
      "op": "swap",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "35": {
      "block": "getBlkData_while_top@2",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "dup",
      "defined_out": [
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "36": {
      "op": "dig 2",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "lastRound#0"
      ]
    },
    "38": {
      "op": "<=",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "bz getBlkData_after_while@4",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "42": {
      "op": "dupn 2",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "round#1 (copy)"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "round#1 (copy)"
      ]
    },
    "44": {
      "op": "block BlkTimestamp",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1"
      ]
    },
    "46": {
      "op": "dig 1",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "round#1 (copy)"
      ]
    },
    "48": {
      "op": "block BlkProposer",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "50": {
      "op": "dig 2",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "round#1 (copy)"
      ]
    },
    "52": {
      "op": "block BlkTxnCounter",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "54": {
      "op": "dig 3",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "round#1 (copy)"
      ]
    },
    "56": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "57": {
      "op": "uncover 3",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "59": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%head%1#0"
      ]
    },
    "61": {
      "op": "swap",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%1#0",
        "tmp%3#1"
      ]
    },
    "62": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "63": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%2#0"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "aggregate%head%2#0",
        "tmp%2#1"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "blkData#0",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "blkData#0"
      ]
    },
    "66": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "67": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "1"
      ]
    },
    "69": {
      "op": "+",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "70": {
      "op": "bury 1",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "72": {
      "op": "b getBlkData_while_top@2"
    },
    "75": {
      "block": "getBlkData_after_while@4",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "138": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "1"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    }
  }
}