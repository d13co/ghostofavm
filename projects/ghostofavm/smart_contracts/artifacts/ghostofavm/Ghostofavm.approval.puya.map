{
  "version": 3,
  "sources": [
    "/home/bit/code/ghostofavm/projects/ghostofavm/smart_contracts/ghostofavm/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;AAEG;;;AAAA;AAAA;;;AAAA;AAAA;AAEsC;AAAA;;AAAA;AAArC;;;AACM;;AAAA;;AAAJ;AAAA;AADuD;AAAA;AAAA;;;;;AAF1D;AAAA;AAAA;AAAA;AAQA;;;AAAA;AAAA;;;AAAA;AAAA;AAEsC;AAAA;;AAAA;AAArC;;;AACM;;AAAA;;AAAJ;AAAA;AADuD;AAAA;AAAA;;;;;AAF1D;AAAA;AAAA;AAAA;AAQA;;;AAAA;AAAA;;;AAAA;AAAA;AAEsC;AAAA;;AAAA;AAArC;;;AACM;;AAAA;;AAAJ;AADuD;AAAA;AAAA;;;;;AAF1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAQA;;;AAAA;AAAA;;;AAAA;AAAA;AAEsC;AAAA;;AAAA;AAArC;;;AAGe;;AAAA;;AACD;;AAAA;;AACE;;AAAA;;AAJW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzB;AAPuD;AAAA;AAAA;;;;;AAF1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAcA;;;AAAA;AAEC;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGqB;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAHmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKzC;;;;;;;;AARH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32"
    },
    "6": {
      "op": "bytecblock 0x151f7c750000000000000000"
    },
    "21": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "24": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "not%tmp%2#0"
      ],
      "stack_out": [
        "not%tmp%2#0"
      ]
    },
    "28": {
      "op": "assert",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x99b7390f 0xb03694dd 0x52ee8161 0x898628b4 0xb534a352 // method \"blkTimestamp(uint64,uint64)uint64\", method \"blkTxnCounter(uint64,uint64)uint64\", method \"blkProposer(uint64,uint64)address\", method \"getBlkData(uint64,uint64)(uint64,uint64,uint64,address)\", method \"acctBalanceData(address[])(address,uint64,uint64)\"",
      "defined_out": [
        "Method(acctBalanceData(address[])(address,uint64,uint64))",
        "Method(blkProposer(uint64,uint64)address)",
        "Method(blkTimestamp(uint64,uint64)uint64)",
        "Method(blkTxnCounter(uint64,uint64)uint64)",
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))"
      ],
      "stack_out": [
        "Method(blkTimestamp(uint64,uint64)uint64)",
        "Method(blkTxnCounter(uint64,uint64)uint64)",
        "Method(blkProposer(uint64,uint64)address)",
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))",
        "Method(acctBalanceData(address[])(address,uint64,uint64))"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(acctBalanceData(address[])(address,uint64,uint64))",
        "Method(blkProposer(uint64,uint64)address)",
        "Method(blkTimestamp(uint64,uint64)uint64)",
        "Method(blkTxnCounter(uint64,uint64)uint64)",
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(blkTimestamp(uint64,uint64)uint64)",
        "Method(blkTxnCounter(uint64,uint64)uint64)",
        "Method(blkProposer(uint64,uint64)address)",
        "Method(getBlkData(uint64,uint64)(uint64,uint64,uint64,address))",
        "Method(acctBalanceData(address[])(address,uint64,uint64))",
        "tmp%4#0"
      ]
    },
    "59": {
      "op": "match blkTimestamp blkTxnCounter blkProposer getBlkData acctBalanceData",
      "stack_out": []
    },
    "71": {
      "op": "err"
    },
    "72": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.blkTimestamp[routing]",
      "params": {},
      "block": "blkTimestamp",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "75": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0"
      ],
      "stack_out": [
        "firstRound#0"
      ]
    },
    "76": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "79": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0",
        "lastRound#0"
      ],
      "stack_out": [
        "firstRound#0",
        "lastRound#0"
      ]
    },
    "80": {
      "op": "swap",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "81": {
      "block": "blkTimestamp_while_top@2",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "dup",
      "defined_out": [
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "82": {
      "op": "dig 2",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "lastRound#0"
      ]
    },
    "84": {
      "op": "<=",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ]
    },
    "85": {
      "op": "bz blkTimestamp_after_while@4",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "88": {
      "op": "dupn 2",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "round#1 (copy)"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "round#1 (copy)"
      ]
    },
    "90": {
      "op": "block BlkTimestamp",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1"
      ]
    },
    "92": {
      "op": "itob",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1"
      ]
    },
    "93": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "1"
      ]
    },
    "95": {
      "op": "+",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "96": {
      "op": "bury 1",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "98": {
      "op": "b blkTimestamp_while_top@2"
    },
    "101": {
      "block": "blkTimestamp_after_while@4",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "0x151f7c750000000000000000"
      ]
    },
    "102": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "103": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "1"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "105": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.blkTxnCounter[routing]",
      "params": {},
      "block": "blkTxnCounter",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "108": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0"
      ],
      "stack_out": [
        "firstRound#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "112": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0",
        "lastRound#0"
      ],
      "stack_out": [
        "firstRound#0",
        "lastRound#0"
      ]
    },
    "113": {
      "op": "swap",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "114": {
      "block": "blkTxnCounter_while_top@2",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "dup",
      "defined_out": [
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "115": {
      "op": "dig 2",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "lastRound#0"
      ]
    },
    "117": {
      "op": "<=",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ]
    },
    "118": {
      "op": "bz blkTxnCounter_after_while@4",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "121": {
      "op": "dupn 2",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "round#1 (copy)"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "round#1 (copy)"
      ]
    },
    "123": {
      "op": "block BlkTxnCounter",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1"
      ]
    },
    "125": {
      "op": "itob",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1"
      ]
    },
    "126": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "1"
      ]
    },
    "128": {
      "op": "+",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "129": {
      "op": "bury 1",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "131": {
      "op": "b blkTxnCounter_while_top@2"
    },
    "134": {
      "block": "blkTxnCounter_after_while@4",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "0x151f7c750000000000000000"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "136": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "1"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "138": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.blkProposer[routing]",
      "params": {},
      "block": "blkProposer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "141": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0"
      ],
      "stack_out": [
        "firstRound#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0",
        "lastRound#0"
      ],
      "stack_out": [
        "firstRound#0",
        "lastRound#0"
      ]
    },
    "146": {
      "op": "swap",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "147": {
      "block": "blkProposer_while_top@2",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "dup",
      "defined_out": [
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "148": {
      "op": "dig 2",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "lastRound#0"
      ]
    },
    "150": {
      "op": "<=",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ]
    },
    "151": {
      "op": "bz blkProposer_after_while@4",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "154": {
      "op": "dupn 2",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "round#1 (copy)"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "round#1 (copy)"
      ]
    },
    "156": {
      "op": "block BlkProposer",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1"
      ]
    },
    "158": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "159": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "1"
      ]
    },
    "160": {
      "op": "+",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "161": {
      "op": "bury 1",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "163": {
      "op": "b blkProposer_while_top@2"
    },
    "166": {
      "block": "blkProposer_after_while@4",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "204": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "205": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "1"
      ]
    },
    "206": {
      "op": "return",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "207": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.getBlkData[routing]",
      "params": {},
      "block": "getBlkData",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "210": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0"
      ],
      "stack_out": [
        "firstRound#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "firstRound#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "214": {
      "op": "btoi",
      "defined_out": [
        "firstRound#0",
        "lastRound#0"
      ],
      "stack_out": [
        "firstRound#0",
        "lastRound#0"
      ]
    },
    "215": {
      "op": "swap",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "216": {
      "block": "getBlkData_while_top@2",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "dup",
      "defined_out": [
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "217": {
      "op": "dig 2",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "lastRound#0"
      ]
    },
    "219": {
      "op": "<=",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "tmp%0#1"
      ]
    },
    "220": {
      "op": "bz getBlkData_after_while@4",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "223": {
      "op": "dupn 2",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "round#1 (copy)"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "round#1 (copy)"
      ]
    },
    "225": {
      "op": "block BlkTimestamp",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1"
      ]
    },
    "227": {
      "op": "dig 1",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "round#1 (copy)"
      ]
    },
    "229": {
      "op": "block BlkProposer",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "231": {
      "op": "dig 2",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "round#1 (copy)"
      ]
    },
    "233": {
      "op": "block BlkTxnCounter",
      "defined_out": [
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "235": {
      "op": "dig 3",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "round#1 (copy)"
      ]
    },
    "237": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "lastRound#0",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "238": {
      "op": "uncover 3",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "240": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%head%1#0"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%1#0",
        "tmp%3#1"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "lastRound#0",
        "round#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "tmp%2#1",
        "aggregate%head%2#0"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "aggregate%head%2#0",
        "tmp%2#1"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "blkData#0",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "blkData#0"
      ]
    },
    "247": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "248": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1",
        "1"
      ]
    },
    "249": {
      "op": "+",
      "stack_out": [
        "lastRound#0",
        "round#1",
        "round#1"
      ]
    },
    "250": {
      "op": "bury 1",
      "defined_out": [
        "lastRound#0",
        "round#1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "252": {
      "op": "b getBlkData_while_top@2"
    },
    "255": {
      "block": "getBlkData_after_while@4",
      "stack_in": [
        "lastRound#0",
        "round#1"
      ],
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "317": {
      "op": "log",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "318": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastRound#0",
        "round#1",
        "1"
      ]
    },
    "319": {
      "op": "return",
      "stack_out": [
        "lastRound#0",
        "round#1"
      ]
    },
    "320": {
      "subroutine": "smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.acctBalanceData[routing]",
      "params": {},
      "block": "acctBalanceData",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "323": {
      "op": "dup"
    },
    "324": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "accounts#0"
      ],
      "stack_out": [
        "accounts#0",
        "accounts#0",
        "0"
      ]
    },
    "325": {
      "op": "extract_uint16",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0"
      ]
    },
    "326": {
      "op": "intc_1 // 0",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "327": {
      "block": "acctBalanceData_for_header@2",
      "stack_in": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "328": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "330": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "331": {
      "op": "bz acctBalanceData_after_for@5",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "334": {
      "op": "dig 2",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "accounts#0"
      ]
    },
    "336": {
      "op": "extract 2 0",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "339": {
      "op": "dig 1",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "341": {
      "op": "dup",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "342": {
      "op": "cover 2",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "344": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "345": {
      "op": "*",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "346": {
      "op": "intc_2 // 32",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "32"
      ]
    },
    "347": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "temp#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0"
      ]
    },
    "348": {
      "op": "dup",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "temp#0 (copy)"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "temp#0 (copy)"
      ]
    },
    "349": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "check%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "351": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0"
      ]
    },
    "352": {
      "op": "dig 1",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0",
        "temp#0 (copy)"
      ]
    },
    "354": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "check%1#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "356": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%1#0",
        "value%0#0"
      ]
    },
    "358": {
      "op": "itob",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%val_as_bytes%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%1#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "temp#0",
        "value%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "359": {
      "op": "uncover 2",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "aggregate%val_as_bytes%0#0",
        "temp#0"
      ]
    },
    "361": {
      "op": "swap",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "temp#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "362": {
      "op": "concat",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%head%1#0",
        "item_index_internal%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "aggregate%head%1#0"
      ]
    },
    "363": {
      "op": "swap",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%head%1#0",
        "value%1#0"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "accounts#0",
        "acctBalanceData#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "acctBalanceData#0"
      ]
    },
    "366": {
      "op": "log",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "367": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "368": {
      "op": "+",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "369": {
      "op": "bury 1",
      "defined_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "371": {
      "op": "b acctBalanceData_for_header@2"
    },
    "374": {
      "block": "acctBalanceData_after_for@5",
      "stack_in": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "428": {
      "op": "log",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "429": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "430": {
      "op": "return",
      "stack_out": [
        "accounts#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    }
  }
}