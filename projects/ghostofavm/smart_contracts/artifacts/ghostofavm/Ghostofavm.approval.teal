#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    // smart_contracts/ghostofavm/contract.algo.ts:11-12
    // @contract({ avmVersion: 11 })
    // export class Ghostofavm extends Contract {
    pushbytes 0x898628b4 // method "getBlkData(uint64,uint64)(uint64,uint64,uint64,address)"
    txna ApplicationArgs 0
    match main_getBlkData_route@2
    err

main_getBlkData_route@2:
    // smart_contracts/ghostofavm/contract.algo.ts:37
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b getBlkData


// smart_contracts/ghostofavm/contract.algo.ts::Ghostofavm.getBlkData[routing]() -> void:
getBlkData:
    // smart_contracts/ghostofavm/contract.algo.ts:37
    // @abimethod({ onCreate: 'require' })
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    swap

getBlkData_while_top@2:
    // smart_contracts/ghostofavm/contract.algo.ts:39
    // for (let round: uint64 = firstRound; round <= lastRound; round++) {
    dup
    dig 2
    <=
    bz getBlkData_after_while@4
    // smart_contracts/ghostofavm/contract.algo.ts:42
    // timestamp: op.Block.blkTimestamp(round),
    dupn 2
    block BlkTimestamp
    // smart_contracts/ghostofavm/contract.algo.ts:43
    // proposer: op.Block.blkProposer(round),
    dig 1
    block BlkProposer
    // smart_contracts/ghostofavm/contract.algo.ts:44
    // txnCounter: op.Block.blkTxnCounter(round),
    dig 2
    block BlkTxnCounter
    // smart_contracts/ghostofavm/contract.algo.ts:40-45
    // const blkData: BlkData = {
    //   round,
    //   timestamp: op.Block.blkTimestamp(round),
    //   proposer: op.Block.blkProposer(round),
    //   txnCounter: op.Block.blkTxnCounter(round),
    // }
    dig 3
    itob
    uncover 3
    itob
    concat
    swap
    itob
    concat
    swap
    concat
    // smart_contracts/ghostofavm/contract.algo.ts:46
    // log(encodeArc4(blkData))
    log
    // smart_contracts/ghostofavm/contract.algo.ts:39
    // for (let round: uint64 = firstRound; round <= lastRound; round++) {
    pushint 1 // 1
    +
    bury 1
    b getBlkData_while_top@2

getBlkData_after_while@4:
    // smart_contracts/ghostofavm/contract.algo.ts:37
    // @abimethod({ onCreate: 'require' })
    pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    log
    pushint 1 // 1
    return
